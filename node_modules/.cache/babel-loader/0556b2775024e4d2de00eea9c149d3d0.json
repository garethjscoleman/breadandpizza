{"ast":null,"code":"import _classCallCheck from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/garethjscoleman/bread pizza/src/Components/doughHydration/doughHydration.js\";\nimport React, { Component } from 'react';\n\nvar DoughHydration =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DoughHydration, _React$Component);\n\n  function DoughHydration(props, context) {\n    var _this;\n\n    _classCallCheck(this, DoughHydration);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DoughHydration).call(this, props, context));\n    _this.updateHydration = _this.updateHydration.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateHydrationRate = _this.updateHydrationRate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    flourTypes: {\n      'DovesWhiteBread', 'DovesBrownBread', 'AllPurpose', 'FrenchT55', 'FrenchT65', 'Type00Pasta';\n    }\n\n    _this.state = {\n      flourType: 'DovesWhiteBread',\n      hydration: 67,\n      watermass: 61,\n      flourmass: 89\n    };\n    return _this;\n  }\n\n  _createClass(DoughHydration, [{\n    key: \"updateHydrationRate\",\n    value: function updateHydrationRate() {\n      if (this.props.breadType == 'pizza') {\n        var theState = this.state;\n        theState.flourType = 'Type00Pasta';\n        theState.hydration = 67;\n        this.setState(theState);\n        this.updateHydration();\n      }\n    }\n  }, {\n    key: \"updateHydration\",\n    value: function updateHydration() {\n      var thestate = this.state;\n      var remainingMass = this.props.doughmass - this.props.startermass;\n      thestate.watermass = Math.round(remainingMass * thestate.hydration / (100 + thestate.hydration));\n      thestate.flourmass = remainingMass - thestate.watermass;\n      this.setState(thestate);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateHydrationRate();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevprops) {\n      if (this.props.breadType !== prevprops.breadType) {\n        this.updateHydratationRate();\n      }\n\n      if (this.props.doughmass !== prevprops.doughmass || this.props.startermass !== prevprops.startermass) {\n        this.updateHydration();\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      this.updateHydration();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Quantities\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \" Flour Type  \", this.state.flourType), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \" Using Hydration  \", this.state.hydration), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \" Mass to add to starter \", this.props.doughmass - this.props.startermass), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Made up of \"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \" Flour Mass  \", this.state.flourmass), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \" Water Mass  \", this.state.watermass), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DoughHydration;\n}(React.Component);\n\nexport default DoughHydration;","map":{"version":3,"sources":["/home/garethjscoleman/bread pizza/src/Components/doughHydration/doughHydration.js"],"names":["React","Component","DoughHydration","props","context","updateHydration","bind","updateHydrationRate","flourTypes","state","flourType","hydration","watermass","flourmass","breadType","theState","setState","thestate","remainingMass","doughmass","startermass","Math","round","prevprops","updateHydratationRate","e"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n\nclass DoughHydration extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n  \n      this.updateHydration = this.updateHydration.bind(this);\n      this.updateHydrationRate = this.updateHydrationRate.bind(this);\n      \n      \n      flourTypes : {\n        'DovesWhiteBread',\n        'DovesBrownBread',\n        'AllPurpose',\n        'FrenchT55',\n        'FrenchT65',\n        'Type00Pasta'\n      }\n\n\n\n      \n      this.state = {\n        flourType: 'DovesWhiteBread',\n        hydration : 67,\n        watermass : 61, \n        flourmass : 89\n      };\n\n\n    }\n    updateHydrationRate(){\n      if (this.props.breadType == 'pizza')\n      {\n        var theState = this.state;\n        theState.flourType = 'Type00Pasta';\n        theState.hydration = 67;\n        this.setState(theState);\n        this.updateHydration();\n      }\n\n    }\n\n    updateHydration(){\n      var thestate = this.state;\n      var remainingMass = this.props.doughmass - this.props.startermass;\n      thestate.watermass = Math.round(remainingMass * thestate.hydration / (100 + thestate.hydration)); \n      thestate.flourmass = remainingMass - thestate.watermass; \n      this.setState(thestate);\n\n\n    }\n    \n\n    componentDidMount() {\n      this.updateHydrationRate();\n    }\n  \n    componentDidUpdate(prevprops) {\n      if (this.props.breadType!==prevprops.breadType ){\n        this.updateHydratationRate();\n      }\n      \n      if (this.props.doughmass!==prevprops.doughmass || this.props.startermass !== prevprops.startermass){\n        this.updateHydration();\n      }\n    }\n\n\n  \n    handleChange(e) {\n     \n      this.updateHydration();\n\n    }\n\n    render() {\n      return (\n                \n        <div>\n          <h2>Quantities</h2>\n          <span> Flour Type  {(this.state.flourType)} \n          </span><br/>\n          <span> Using Hydration  {(this.state.hydration)} \n          </span><br/>\n          <span> Mass to add to starter {(this.props.doughmass - this.props.startermass)}\n          </span><br/>\n          <h2>Made up of </h2>\n          <span> Flour Mass  {(this.state.flourmass)} \n          </span><br/>\n          <span> Water Mass  {(this.state.watermass)} \n          </span><br/>\n        </div>\n      );\n    }\n  }\n  \n  export default DoughHydration;"]},"metadata":{},"sourceType":"module"}