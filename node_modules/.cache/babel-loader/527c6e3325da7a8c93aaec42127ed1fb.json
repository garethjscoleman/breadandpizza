{"ast":null,"code":"import _classCallCheck from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/garethjscoleman/bread pizza/src/Components/quantitiesAndTimes/quantitiesAndTimes.js\";\nimport React, { Component } from 'react';\nimport { FormGroup, ControlLabel, FormControl, HelpBlock } from 'react-bootstrap';\nimport { InputMoment, BigInputMoment, DatePicker, TimePicker } from 'react-input-moment';\nimport DisplayQuantitiesTimesTab from './../displayQuantitiesTimesTab/displayQuantitiesTimesTab';\nimport { doughCalc } from './../../Services/doughCalc';\nimport { pizzaMass } from './../../Services/doughCalc';\nimport { bakeTime } from './../../Services/doughCalc';\nimport moment from 'moment';\nimport ReactDOM from 'react-dom';\nimport InputRange from 'react-input-range';\nimport \"react-input-range/lib/css/index.css\";\n\nvar QuantitiesAndTimes =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(QuantitiesAndTimes, _React$Component);\n\n  function QuantitiesAndTimes(props, context) {\n    var _this;\n\n    _classCallCheck(this, QuantitiesAndTimes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuantitiesAndTimes).call(this, props, context));\n\n    _this.calcTimeToRise = function (doughProps) {\n      doughProps.breadType = this.props.breadType;\n      var proofingtimes = doughProps.proofingtimes;\n      var firstrisetime = doughCalc(doughProps.temperature, doughProps.startermass, doughProps.doughmass);\n      var secondrisetime = doughCalc(doughProps.fridgetemperature, doughProps.startermass, doughProps.doughmass);\n      doughProps.proofingtimes.inroom = firstrisetime;\n      doughProps.proofingtimes.infridge = secondrisetime;\n      doughProps.timeToRise = firstrisetime + secondrisetime;\n\n      try {\n        doughProps.desiredDateTime = Date.parse(doughProps.desiredDate + ' ' + doughProps.desiredTime);\n      } catch (_unused) {\n        doughProps.desiredDateTime = 0;\n      }\n\n      if (isNaN(doughProps.desiredDateTime)) {\n        doughProps.desiredDateTime = 0;\n      } else {\n        doughProps.baketime = bakeTime(doughProps.breadType, doughProps.doughmass);\n        doughProps.roomstart = new Date(doughProps.desiredDateTime - doughProps.baketime - 2 * doughProps.proofingtimes.inroom * (60 * 1000)).toLocaleString();\n        doughProps.roomshape = new Date(doughProps.desiredDateTime - doughProps.baketime - doughProps.proofingtimes.inroom * (60 * 1000)).toLocaleString();\n        doughProps.fridgestart = new Date(doughProps.desiredDateTime - doughProps.baketime - 2 * doughProps.proofingtimes.infridge * (60 * 1000)).toLocaleString();\n        doughProps.fridgeshape = new Date(doughProps.desiredDateTime - doughProps.baketime - doughProps.proofingtimes.infridge * (60 * 1000)).toLocaleString();\n        doughProps.roomplusfridgestart = new Date(doughProps.desiredDateTime - doughProps.baketime - (doughProps.proofingtimes.infridge + doughProps.proofingtimes.inroom) * (60 * 1000)).toLocaleString();\n        doughProps.roomplusfridgeshape = new Date(doughProps.desiredDateTime - doughProps.baketime - doughProps.proofingtimes.inroom * (60 * 1000)).toLocaleString();\n        doughProps.fridgeplusroomstart = doughProps.roomplusfridgestart;\n        doughProps.fridgeplusroomshape = new Date(doughProps.desiredDateTime - doughProps.baketime - doughProps.proofingtimes.infridge * (60 * 1000)).toLocaleString();\n      }\n\n      return doughProps;\n    };\n\n    _this.getValidationState = function () {\n      var theQuantity = this.state.quantity;\n      if (theQuantity < 1) return 'error';else if (theQuantity > 5000) return 'error';\n      var theSize = this.state.size;\n      if (theSize < 1) return 'error';else if (theSize > 5000) return 'error';\n      var theTemp = this.state.temperature;\n      if (theTemp < 1) return 'error';else if (theTemp > 35) return 'error';\n      var theFridgeTemp = this.state.fridgetemperature;\n      if (theFridgeTemp < 1) return 'error';else if (theFridgeTemp > 35) return 'error';\n      var theStarterMass = this.state.startermass;\n      if (theStarterMass < 1) return 'error';else if (theStarterMass > 50000) return 'error';\n      var theDoughMass = this.state.doughmass;\n      if (theDoughMass < 1) return 'error';else if (theDoughMass > 50000) return 'error';else return 'success';\n    };\n\n    var show = true;\n    var showClass = \"show\";\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSizeChange = _this.handleSizeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleWantedTimeChange = _this.handleWantedTimeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleWantedDateChange = _this.handleWantedDateChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFridgeChange = _this.handleFridgeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTempChange = _this.handleTempChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setDesiredStartTime = _this.setDesiredStartTime.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleStarterChange = _this.handleStarterChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMassChange = _this.handleMassChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMomentChange = _this.handleMomentChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.hideOrShow = _this.hideOrShow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      show: true,\n      breadType: props.breadType,\n      baketime: 0,\n      quantity: 1,\n      size: 9,\n      temperature: 17,\n      fridgetemperature: 5,\n      startermass: 100,\n      doughmass: 250,\n      moment: moment(),\n      desiredDate: '1999-12-31',\n      desiredTime: '23:59',\n      desiredDateTime: 0,\n      roomstart: 0,\n      fridgestart: 0,\n      roomplusfridgestart: 0,\n      roomplusfridgeshape: 0,\n      fridgeplusroomstart: 0,\n      fridgeplusroomshape: 0,\n      proofingtimes: {\n        inroom: 0,\n        infridge: 0\n      },\n      timeToRise: 0\n    };\n    return _this;\n  }\n\n  _createClass(QuantitiesAndTimes, [{\n    key: \"hideOrShow\",\n    value: function hideOrShow() {\n      this.setState(function (state) {\n        return {\n          show: !state.show\n        };\n      });\n      this.show = !this.show;\n\n      if (this.show) {\n        this.showClass = 'Show';\n      } else {\n        this.showClass = 'Hide';\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var theDate = new Date();\n      theDate.setHours(theDate.getHours() + 6);\n      var doughProps = this.state;\n      doughProps = this.setDesiredStartTime(theDate, doughProps);\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"setDesiredStartTime\",\n    value: function setDesiredStartTime(theTimetoStart, doughProps) {\n      //we need a point a bit in the future - try 6 hours \n      //today = today.addHours(6);\n      var dd = theTimetoStart.getDate();\n      var mm = theTimetoStart.getMonth() + 1; //January is 0!      \n\n      var yyyy = theTimetoStart.getFullYear();\n      var HH = theTimetoStart.getHours();\n      var nn = theTimetoStart.getMinutes();\n\n      if (dd < 10) {\n        dd = '0' + dd;\n      }\n\n      if (mm < 10) {\n        mm = '0' + mm;\n      }\n\n      if (HH < 10) {\n        HH = '0' + HH;\n      }\n\n      if (nn < 10) {\n        nn = '0' + nn;\n      }\n\n      var sDay = yyyy + '-' + mm + '-' + dd;\n      var sTime = HH + ':' + nn;\n      doughProps.desiredDate = sDay;\n      doughProps.desiredTime = sTime;\n      return doughProps;\n    }\n  }, {\n    key: \"handleMomentChange\",\n    value: function handleMomentChange(value) {\n      var doughProps = this.state;\n      console.log(value.format('DD-MM-YYYY'));\n      this.setDesiredStartTime(value.toDate(), doughProps);\n    }\n  }, {\n    key: \"handleChangesToDoughRiseTime\",\n    value: function handleChangesToDoughRiseTime(doughProps) {\n      var newdoughmass;\n\n      if (doughProps.breadType === \"pizza\") {\n        newdoughmass = pizzaMass(doughProps.size, doughProps.quantity, 'napoletana');\n      } else {\n        newdoughmass = doughProps.doughmass;\n      }\n\n      if (newdoughmass > 1) {\n        doughProps.doughmass = newdoughmass;\n        var startermass = doughProps.startermass;\n\n        if (startermass > 0.5 * newdoughmass) {\n          var newstartermass = 0.5 * newdoughmass;\n\n          if (newstartermass > 1) {\n            doughProps.startermass = newstartermass;\n          }\n        }\n\n        doughProps = this.calcTimeToRise(doughProps);\n      }\n\n      return doughProps;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(value) {\n      var doughProps = this.state;\n      doughProps.quantity = value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleSizeChange\",\n    value: function handleSizeChange(value) {\n      var doughProps = this.state;\n      doughProps.size = value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleMassChange\",\n    value: function handleMassChange(value) {\n      var doughProps = this.state;\n      doughProps.size = 9;\n      doughProps.quantity = value / 225;\n      doughProps.doughmass = value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleStarterChange\",\n    value: function handleStarterChange(value) {\n      var doughProps = this.state;\n      doughProps.startermass = value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleWantedTimeChange\",\n    value: function handleWantedTimeChange(e) {\n      var doughProps = this.state;\n      doughProps.desiredTime = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleWantedDateChange\",\n    value: function handleWantedDateChange(e) {\n      var doughProps = this.state;\n      doughProps.desiredDate = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleFridgeChange\",\n    value: function handleFridgeChange(value) {\n      var doughProps = this.state;\n      doughProps.fridgetemperature = value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleTempChange\",\n    value: function handleTempChange(value) {\n      var doughProps = this.state;\n      doughProps.temperature = value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var breadType = this.props.breadType;\n      var doughProps = this.state;\n\n      if (breadType !== doughProps.breadType) {\n        doughProps = this.handleChangesToDoughRiseTime(doughProps);\n        this.setState(doughProps);\n      }\n\n      var wrapperClass = 'wrapper medium';\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        controlId: \"formPizzaQantities\",\n        validationState: this.getValidationState(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, breadType === \"pizza\" ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, \"How Many Pizza's do you want?  \", this.state.breadType === \"pizza\"), React.createElement(InputRange, {\n        formatMinLabel: function formatMinLabel(value) {\n          return \" Min \".concat(value, \" \");\n        },\n        formatMaxLabel: function formatMaxLabel(value) {\n          return \" Max \".concat(value, \" \");\n        },\n        step: 1,\n        maxValue: 15,\n        minValue: 1,\n        value: this.state.quantity,\n        onChange: function onChange(quantity) {\n          _this2.setState({\n            quantity: quantity\n          });\n\n          _this2.handleChange(quantity);\n        },\n        onChangeComplete: function onChangeComplete(value) {\n          return console.log(value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"This has to be a number between 1 and 5000.\"), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, \"How big should they be\"), React.createElement(InputRange, {\n        formatMinLabel: function formatMinLabel(value) {\n          return \" Min \".concat(value, \" \");\n        },\n        formatMaxLabel: function formatMaxLabel(value) {\n          return \" Max \".concat(value, \" \");\n        },\n        step: 1,\n        maxValue: 11,\n        minValue: 7,\n        value: this.state.size,\n        onChange: function onChange(size) {\n          _this2.setState({\n            size: size\n          });\n\n          _this2.handleSizeChange(size);\n        },\n        onChangeComplete: function onChangeComplete(value) {\n          return console.log(value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, \"This has to be a number between 7 and 18 inches.\")) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, \"How large do you want your loaf?\"), React.createElement(InputRange, {\n        formatLabel: function formatLabel(value) {\n          return \"\".concat(value, \" g\");\n        },\n        formatMinLabel: function formatMinLabel(value) {\n          return \"Min \".concat(value, \" g\");\n        },\n        formatMaxLabel: function formatMaxLabel(value) {\n          return \"Max \".concat(value, \" g\");\n        },\n        step: 50,\n        maxValue: 3000,\n        minValue: 250,\n        value: this.state.doughmass,\n        onChange: function onChange(doughmass) {\n          _this2.setState({\n            doughmass: doughmass\n          });\n\n          _this2.handleMassChange(doughmass);\n        },\n        onChangeComplete: function onChangeComplete(value) {\n          return console.log(value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, \"This has to be a number between 1 and 5000.\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, \" This is total mass of dough we need \", Math.round(this.state.size * this.state.size / 81 * this.state.quantity * 225), \"g\"), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, \"How Much Starter do you have?\"), React.createElement(InputRange, {\n        formatMinLabel: function formatMinLabel(value) {\n          return \" Min \".concat(value, \" g\");\n        },\n        formatMaxLabel: function formatMaxLabel(value) {\n          return \" Max \".concat(value, \" g\");\n        },\n        step: 1,\n        maxValue: Math.round(this.state.doughmass / 2),\n        minValue: 0,\n        value: this.state.startermass,\n        onChange: function onChange(startermass) {\n          _this2.setState({\n            startermass: startermass\n          });\n\n          _this2.handleStarterChange(startermass);\n        },\n        onChangeComplete: function onChangeComplete(value) {\n          return console.log(value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, \"This has to be a number between 10 and 5000.\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.hideOrShow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, this.state.show ? 'ON' : 'OFF'), React.createElement(\"button\", {\n        onClick: this.hideOrShow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, this.showClass), React.createElement(\"div\", {\n        className: \"{(this.showClass)}\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, \"Which day do you want it\"), React.createElement(\"div\", {\n        className: wrapperClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, React.createElement(BigInputMoment, {\n        moment: this.state.moment,\n        showSeconds: false,\n        onChange: function onChange(mom) {\n          _this2.handleMomentChange(mom);\n\n          _this2.setState({\n            moment: mom\n          });\n        },\n        locale: \"en\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      })))), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }, \"How warm is the room?\"), React.createElement(InputRange, {\n        formatMinLabel: function formatMinLabel(value) {\n          return \" Min \".concat(value, \" g\");\n        },\n        formatMaxLabel: function formatMaxLabel(value) {\n          return \" Max \".concat(value, \" g\");\n        },\n        step: 1,\n        maxValue: 35,\n        minValue: 0,\n        value: this.state.temperature,\n        onChange: function onChange(temperature) {\n          _this2.setState({\n            temperature: temperature\n          });\n\n          _this2.handleTempChange(temperature);\n        },\n        onChangeComplete: function onChangeComplete(value) {\n          return console.log(value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }, \"This has to be a number between 4 and 35.\"), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }, \"How cold is the fridge?\"), React.createElement(InputRange, {\n        formatMinLabel: function formatMinLabel(value) {\n          return \" Min \".concat(value, \" g\");\n        },\n        formatMaxLabel: function formatMaxLabel(value) {\n          return \" Max \".concat(value, \" g\");\n        },\n        step: 1,\n        maxValue: 35,\n        minValue: 0,\n        value: this.state.fridgetemperature,\n        onChange: function onChange(fridgetemperature) {\n          _this2.setState({\n            fridgetemperature: fridgetemperature\n          });\n\n          _this2.handleFridgeChange(fridgetemperature);\n        },\n        onChangeComplete: function onChangeComplete(value) {\n          return console.log(value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }, \"This has to be a number between 4 and 35.\")), React.createElement(DisplayQuantitiesTimesTab, {\n        fridgeplusroomshape: this.state.fridgeplusroomshape,\n        roomplusfridgeshape: this.state.roomplusfridgeshape,\n        doughmass: this.state.doughmass,\n        startermass: this.state.startermass,\n        baketime: this.state.baketime,\n        breadType: this.state.breadType,\n        infridge: this.state.proofingtimes.infridge,\n        fridgestart: this.state.fridgestart,\n        fridgeshape: this.state.fridgeshape,\n        roomshape: this.state.roomshape,\n        roomstart: this.state.roomstart,\n        inroom: this.state.proofingtimes.inroom,\n        roomplusfridgestart: this.state.roomplusfridgestart,\n        fridgeplusroomstart: this.state.fridgeplusroomstart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return QuantitiesAndTimes;\n}(React.Component);\n\nexport default QuantitiesAndTimes;","map":{"version":3,"sources":["/home/garethjscoleman/bread pizza/src/Components/quantitiesAndTimes/quantitiesAndTimes.js"],"names":["React","Component","FormGroup","ControlLabel","FormControl","HelpBlock","InputMoment","BigInputMoment","DatePicker","TimePicker","DisplayQuantitiesTimesTab","doughCalc","pizzaMass","bakeTime","moment","ReactDOM","InputRange","QuantitiesAndTimes","props","context","calcTimeToRise","doughProps","breadType","proofingtimes","firstrisetime","temperature","startermass","doughmass","secondrisetime","fridgetemperature","inroom","infridge","timeToRise","desiredDateTime","Date","parse","desiredDate","desiredTime","isNaN","baketime","roomstart","toLocaleString","roomshape","fridgestart","fridgeshape","roomplusfridgestart","roomplusfridgeshape","fridgeplusroomstart","fridgeplusroomshape","getValidationState","theQuantity","state","quantity","theSize","size","theTemp","theFridgeTemp","theStarterMass","theDoughMass","show","showClass","handleChange","bind","handleSizeChange","handleWantedTimeChange","handleWantedDateChange","handleFridgeChange","handleTempChange","setDesiredStartTime","handleStarterChange","handleMassChange","handleMomentChange","hideOrShow","setState","theDate","setHours","getHours","handleChangesToDoughRiseTime","theTimetoStart","dd","getDate","mm","getMonth","yyyy","getFullYear","HH","nn","getMinutes","sDay","sTime","value","console","log","format","toDate","newdoughmass","newstartermass","e","target","wrapperClass","Math","round","mom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { FormGroup, ControlLabel, FormControl, HelpBlock}  from 'react-bootstrap';\nimport {InputMoment, BigInputMoment, DatePicker, TimePicker} from 'react-input-moment';\nimport DisplayQuantitiesTimesTab from './../displayQuantitiesTimesTab/displayQuantitiesTimesTab'; \n\nimport { doughCalc } from './../../Services/doughCalc';\nimport { pizzaMass } from './../../Services/doughCalc';\nimport { bakeTime } from './../../Services/doughCalc';\nimport moment from 'moment';\nimport ReactDOM from 'react-dom';\nimport InputRange from 'react-input-range';\nimport \"react-input-range/lib/css/index.css\"\n\nclass QuantitiesAndTimes extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n      var show = true;\n      var showClass = \"show\";\n      \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSizeChange = this.handleSizeChange.bind(this);\n      this.handleWantedTimeChange = this.handleWantedTimeChange.bind(this);\n      this.handleWantedDateChange = this.handleWantedDateChange.bind(this);\n      this.handleFridgeChange = this.handleFridgeChange.bind(this);\n      this.handleTempChange = this.handleTempChange.bind(this);\n      this.setDesiredStartTime = this.setDesiredStartTime.bind(this);\n      this.handleStarterChange = this.handleStarterChange.bind(this);\n      this.handleMassChange = this.handleMassChange.bind(this);\n      this.handleMomentChange = this.handleMomentChange.bind(this);\n      this.hideOrShow = this.hideOrShow.bind(this);\n      this.state = {\n        show :true,\n        breadType: props.breadType,\n        baketime:0,\n        quantity : 1,\n        size : 9,\n        temperature : 17,\n        fridgetemperature : 5,\n        startermass : 100,\n        doughmass : 250,\n        moment: moment(), \n        desiredDate: '1999-12-31',\n        desiredTime: '23:59',\n        desiredDateTime : 0,\n        roomstart: 0 ,\n        fridgestart : 0,\n        roomplusfridgestart:0,\n        roomplusfridgeshape:0,\n        fridgeplusroomstart:0,\n        fridgeplusroomshape:0,\n        proofingtimes : {\n          inroom : 0,\n          infridge : 0\n        },\n        timeToRise:0,\n       \n      };\n\n    }\n\n    hideOrShow(){\n      this.setState(state => ({\n        show: !state.show\n      }));\n      this.show = !this.show;\n      if(this.show)\n      {\n        this.showClass = 'Show';\n      }\n      else\n      {\n        this.showClass = 'Hide';\n      }\n\n    }\n\n    componentDidMount() {\n      \n      var theDate = new Date();\n      theDate.setHours( theDate.getHours()+6);\n      \n      var doughProps = this.state;\n      doughProps = this.setDesiredStartTime(theDate, doughProps);\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  \n \n    setDesiredStartTime(theTimetoStart, doughProps){\n      \n      //we need a point a bit in the future - try 6 hours \n      //today = today.addHours(6);\n\n      var dd = theTimetoStart.getDate();\n      var mm = theTimetoStart.getMonth() + 1; //January is 0!      \n      var yyyy = theTimetoStart.getFullYear();\n      var HH = theTimetoStart.getHours();\n      var nn = theTimetoStart.getMinutes();\n\n      if (dd < 10) {\n        dd = '0' + dd;\n      } \n      if (mm < 10) {\n        mm = '0' + mm;\n      } \n      if (HH < 10) {\n        HH = '0' + HH;\n      } \n      if (nn < 10) {\n        nn = '0' + nn;\n      } \n      var sDay =  yyyy + '-' + mm + '-' + dd ;\n      var sTime = HH + ':'+ nn;\n      doughProps.desiredDate =  sDay;\n      doughProps.desiredTime = sTime ;\n      return doughProps;\n\n    }\n\n\n   \n\n    calcTimeToRise = function(doughProps){\n      doughProps.breadType= this.props.breadType;\n      var proofingtimes = doughProps.proofingtimes;\n      var firstrisetime = doughCalc(doughProps.temperature,doughProps.startermass,doughProps.doughmass);\n      var secondrisetime = doughCalc(doughProps.fridgetemperature,doughProps.startermass,doughProps.doughmass); \n      doughProps.proofingtimes.inroom = firstrisetime;\n      doughProps.proofingtimes.infridge = secondrisetime ;\n      doughProps.timeToRise = firstrisetime+secondrisetime ;\n      try {\n        doughProps.desiredDateTime = Date.parse(doughProps.desiredDate + ' ' + doughProps.desiredTime);\n      }\n      catch\n      {\n        doughProps.desiredDateTime = 0;\n      } \n      if (isNaN(doughProps.desiredDateTime))\n      {\n        doughProps.desiredDateTime = 0;\n      } \n      else\n      {\n         \n        doughProps.baketime = bakeTime(doughProps.breadType,doughProps.doughmass);\n        doughProps.roomstart =  (new Date(doughProps.desiredDateTime - doughProps.baketime - (2*doughProps.proofingtimes.inroom*(60*1000)))).toLocaleString();\n        doughProps.roomshape = (new Date(doughProps.desiredDateTime - doughProps.baketime -  (doughProps.proofingtimes.inroom*(60*1000)))).toLocaleString();\n        doughProps.fridgestart =  (new Date(doughProps.desiredDateTime - doughProps.baketime - (2*doughProps.proofingtimes.infridge*(60*1000)))).toLocaleString();\n        doughProps.fridgeshape =  (new Date(doughProps.desiredDateTime - doughProps.baketime -  (doughProps.proofingtimes.infridge*(60*1000)))).toLocaleString();\n        doughProps.roomplusfridgestart =  (new Date(doughProps.desiredDateTime - doughProps.baketime - ((doughProps.proofingtimes.infridge+doughProps.proofingtimes.inroom)*(60*1000)))).toLocaleString();\n        doughProps.roomplusfridgeshape = (new Date(doughProps.desiredDateTime - doughProps.baketime -  (doughProps.proofingtimes.inroom*(60*1000)))).toLocaleString();\n        doughProps.fridgeplusroomstart = doughProps.roomplusfridgestart; \n        doughProps.fridgeplusroomshape =  (new Date(doughProps.desiredDateTime - doughProps.baketime - (doughProps.proofingtimes.infridge*(60*1000)))).toLocaleString();\n\n\n      }\n      return doughProps;\n    }\n\n    \n\n     getValidationState = function() {\n      const theQuantity = this.state.quantity;\n      if (theQuantity < 1) return 'error';\n      else if (theQuantity > 5000) return 'error';\n      const theSize = this.state.size;\n      if (theSize < 1) return 'error';\n      else if (theSize > 5000) return 'error';\n      const theTemp = this.state.temperature;\n      if (theTemp < 1) return 'error';\n      else if (theTemp > 35) return 'error';\n      const theFridgeTemp = this.state.fridgetemperature;\n      if (theFridgeTemp < 1) return 'error';\n      else if (theFridgeTemp > 35) return 'error';      \n      const theStarterMass = this.state.startermass;\n      if (theStarterMass < 1) return 'error';\n      else if (theStarterMass > 50000) return 'error';      \n      const theDoughMass = this.state.doughmass;\n      if (theDoughMass < 1) return 'error';\n      else if (theDoughMass > 50000) return 'error';\n      else return 'success';      \n    }\n    handleMomentChange(value){\n      var doughProps = this.state;\n      console.log(value.format('DD-MM-YYYY'));\n      this.setDesiredStartTime(value.toDate(),doughProps);      \n    }\n\n\n    handleChangesToDoughRiseTime(doughProps){\n      var newdoughmass; \n      if ( doughProps.breadType === \"pizza\"){\n        newdoughmass = pizzaMass( doughProps.size, doughProps.quantity, 'napoletana' ) ; \n      }\n      else\n      {\n        newdoughmass = doughProps.doughmass;\n      }\n      if (newdoughmass>1)\n      {\n        doughProps.doughmass = newdoughmass;  \n        var startermass = doughProps.startermass;\n        if (startermass> 0.5* newdoughmass ){\n          var newstartermass = 0.5* newdoughmass;\n          if (newstartermass>1)\n          {\n            doughProps.startermass = newstartermass;\n          }\n        }                \n        doughProps = this.calcTimeToRise(doughProps);\n      }\n      return doughProps;\n\n    }\n\n  \n    handleChange(value) {\n      var doughProps = this.state;\n      doughProps.quantity = value; \n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n      \n\n    }\n    handleSizeChange(value) {\n      var doughProps = this.state;\n      doughProps.size = value; \n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n\n    }\n    handleMassChange(value)\n    {\n      var doughProps = this.state;\n      doughProps.size = 9; \n      doughProps.quantity =  value/225;\n      doughProps.doughmass =  value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n\n\n    }\n    handleStarterChange(value) {\n      var doughProps = this.state;\n      doughProps.startermass = value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n    handleWantedTimeChange(e) {\n      var doughProps = this.state;\n      doughProps.desiredTime = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n    handleWantedDateChange(e) {\n      var doughProps = this.state;\n      doughProps.desiredDate = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n    handleFridgeChange(value) {\n      var doughProps = this.state;\n      doughProps.fridgetemperature = value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n    handleTempChange(value) {\n      var doughProps = this.state;\n      doughProps.temperature = value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n\n    render() {\n      const breadType = this.props.breadType;\n      var doughProps = this.state;\n      if (breadType!==doughProps.breadType)\n      {\n        doughProps = this.handleChangesToDoughRiseTime(doughProps);\n        this.setState(doughProps);\n      }\n      let wrapperClass = 'wrapper medium'  ;\n      return(\n\n     <div>\n       <form className=\"form\">\n        \n        </form>\n        <form className=\"form\">\n            <FormGroup\n              controlId=\"formPizzaQantities\"\n              validationState={this.getValidationState()}>\n              { breadType===\"pizza\" ? <div> \n            \n              <ControlLabel>How Many Pizza&apos;s do you want?  {(this.state.breadType===\"pizza\")}</ControlLabel>\n              <InputRange \n              formatMinLabel={value => ` Min ${value} `}\n              formatMaxLabel={value => ` Max ${value} `}\n              step={1}\n              maxValue={15}\n              minValue={1}\n              value={this.state.quantity}\n              onChange={quantity => {this.setState({ quantity }); this.handleChange(quantity); }} \n              onChangeComplete={value => console.log(value)}\n              />\n\n              <HelpBlock>This has to be a number between 1 and 5000.</HelpBlock>\n              <ControlLabel>How big should they be</ControlLabel>\n              <InputRange \n              formatMinLabel={value => ` Min ${value} `}\n              formatMaxLabel={value => ` Max ${value} `}\n              step={1}\n              maxValue={11}\n              minValue={7}\n              value={this.state.size}\n              onChange={size => {this.setState({ size }); this.handleSizeChange(size); }} \n              onChangeComplete={value => console.log(value)}\n              />\n              <HelpBlock>This has to be a number between 7 and 18 inches.</HelpBlock> \n              </div>: \n              <div>\n                <ControlLabel>How large do you want your loaf?</ControlLabel>\n                <InputRange \n                formatLabel={value => `${value} g`}\n                formatMinLabel={value => `Min ${value} g`}\n                formatMaxLabel={value => `Max ${value} g`}\n\n              step={50}\n              maxValue={3000}\n              minValue={250}\n              value={this.state.doughmass}\n              onChange={doughmass => {this.setState({ doughmass }); this.handleMassChange(doughmass); }} \n              onChangeComplete={value => console.log(value)}\n              />\n\n              <HelpBlock>This has to be a number between 1 and 5000.</HelpBlock>\n            </div>\n            }\n\n              <div> This is total mass of dough we need {Math.round((this.state.size*this.state.size/81)*this.state.quantity*225)}g</div>\n              <ControlLabel>How Much Starter do you have?</ControlLabel>\n              <InputRange \n              formatMinLabel={value => ` Min ${value} g`}\n              formatMaxLabel={value => ` Max ${value} g`}\n              step={1}\n              maxValue={Math.round(this.state.doughmass/2)}\n              minValue={0}\n              value={this.state.startermass}\n              onChange={startermass => {this.setState({ startermass }); this.handleStarterChange(startermass); }} \n              onChangeComplete={value => console.log(value)}\n              />\n              <HelpBlock>This has to be a number between 10 and 5000.</HelpBlock>\n\n            <div>\n              <button onClick={this.hideOrShow}>\n                {this.state.show ? 'ON' : 'OFF'}\n              </button>\n              <button onClick={this.hideOrShow}   >\n                {(this.showClass)}\n              </button>\n              <div className=\"{(this.showClass)}\">\n\n                <ControlLabel>Which day do you want it</ControlLabel>\n                <div className={wrapperClass}>\n                  <BigInputMoment\n                    moment={this.state.moment}\n                    showSeconds={false}\n                    onChange={mom => { this.handleMomentChange(mom);this.setState({moment: mom});}}\n                    locale=\"en\"\n                  />\n                </div>\n              </div>\n            </div>\n              <ControlLabel>How warm is the room?</ControlLabel>\n              <InputRange \n              formatMinLabel={value => ` Min ${value} g`}\n              formatMaxLabel={value => ` Max ${value} g`}\n              step={1}\n              maxValue={35}\n              minValue={0}\n              value={this.state.temperature}\n              onChange={temperature => {this.setState({ temperature }); this.handleTempChange(temperature); }} \n              onChangeComplete={value => console.log(value)}\n              />\n              <HelpBlock>This has to be a number between 4 and 35.</HelpBlock>\n              <ControlLabel>How cold is the fridge?</ControlLabel>\n              \n              <InputRange \n              formatMinLabel={value => ` Min ${value} g`}\n              formatMaxLabel={value => ` Max ${value} g`}\n              step={1}\n              maxValue={35}\n              minValue={0}\n              value={this.state.fridgetemperature}\n              onChange={fridgetemperature => {this.setState({ fridgetemperature }); this.handleFridgeChange(fridgetemperature); }} \n              onChangeComplete={value => console.log(value)}\n              />\n\n              <HelpBlock>This has to be a number between 4 and 35.</HelpBlock>\n\n\n\n            </FormGroup>\n            <DisplayQuantitiesTimesTab fridgeplusroomshape={this.state.fridgeplusroomshape} roomplusfridgeshape={this.state.roomplusfridgeshape}  doughmass={this.state.doughmass} startermass={this.state.startermass} baketime={this.state.baketime} breadType={this.state.breadType} infridge={this.state.proofingtimes.infridge} fridgestart={this.state.fridgestart} fridgeshape={this.state.fridgeshape} roomshape={this.state.roomshape} roomstart={this.state.roomstart} inroom={this.state.proofingtimes.inroom} roomplusfridgestart={this.state.roomplusfridgestart} fridgeplusroomstart={this.state.fridgeplusroomstart} />\n      \n          </form>\n      </div>);\n      }  \n    }\n  \n  \n  export default QuantitiesAndTimes;"]},"metadata":{},"sourceType":"module"}