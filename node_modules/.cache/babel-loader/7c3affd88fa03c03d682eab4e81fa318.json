{"ast":null,"code":"export function doughCalc(temperature, startermass, doughmass) {\n  var timeinMinutes = 0;\n\n  if (temperature < 4 || temperature > 35 || startermass < 1 || startermass > 5000 || doughmass < 1 || doughmass > 5000) {\n    //hmm something funny going on \n    return 1;\n  } //timeinMinutes = 45/(Math.pow(2,((35-this.state.temperature)/7))*(1+Math.log2(0.5)-Math.log2(this.state.startermass/this.state.doughmass)));\n\n\n  timeinMinutes = 45 / (1 / (Math.pow(2, (35 - temperature) / 7) * (1 + Math.log2(0.5) - Math.log2(startermass / doughmass))));\n  return Math.round(timeinMinutes);\n}\nexport function pizzaMass(size, number, pizzatype) {\n  var thicknessfactor = 1;\n\n  switch (pizzatype) {\n    case 'chicago':\n    case 'deeppan':\n      thicknessfactor = 2;\n      break;\n\n    case 'napoletana':\n    case 'romano':\n      thicknessfactor = 1;\n      break;\n\n    default:\n      thicknessfactor = 1;\n      break;\n  } //A 9 inch pizza with thin base (romano?)  should be made from 225g dough\n\n\n  var pizzamass = number * thicknessfactor * (size * size / 81) * 225;\n  return pizzamass;\n}\nexport function bakeTime(type, mass) {\n  var time = 0;\n\n  switch (type) {\n    case 'chicago':\n    case 'deeppan':\n      time = 10;\n      break;\n\n    case 'pizza':\n    case 'napoletana':\n    case 'romano':\n      time = 7;\n      break;\n\n    case 'roundloaf':\n      time = Math.pow(mass, 1 / 3) / 10 * 40;\n      break;\n\n    case 'flatloaf':\n      time = Math.pow(mass, 1 / 3) / 5 * 40;\n      break;\n\n    case 'ovalloaf':\n      time = Math.pow(mass, 1 / 3) / 7 * 40;\n      break;\n\n    case 'smallbuns':\n      time = 15;\n      break;\n\n    case 'baguette':\n      time = 15;\n      break;\n\n    case 'largebuns':\n      time = 20;\n      break;\n\n    default:\n      time = 30;\n      break;\n  }\n\n  return 60 * 1000 * time;\n}","map":{"version":3,"sources":["/home/garethjscoleman/bread pizza/src/Services/doughCalc.js"],"names":["doughCalc","temperature","startermass","doughmass","timeinMinutes","Math","pow","log2","round","pizzaMass","size","number","pizzatype","thicknessfactor","pizzamass","bakeTime","type","mass","time"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,WAAnB,EAA+BC,WAA/B,EAA2CC,SAA3C,EAAsD;AAGzD,MAAIC,aAAa,GAAG,CAApB;;AACA,MAAIH,WAAW,GAAC,CAAZ,IAAiBA,WAAW,GAAC,EAA7B,IAAmCC,WAAW,GAAC,CAA/C,IAAoDA,WAAW,GAAC,IAAhE,IAAwEC,SAAS,GAAC,CAAlF,IAAuFA,SAAS,GAAC,IAArG,EACA;AACI;AACA,WAAO,CAAP;AACH,GARwD,CASzD;;;AACAC,EAAAA,aAAa,GAAI,EAAD,IAAM,KAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,CAAC,KAAGL,WAAJ,IAAiB,CAA7B,KAAkC,IAAEI,IAAI,CAACE,IAAL,CAAU,GAAV,CAAF,GAAiBF,IAAI,CAACE,IAAL,CAAUL,WAAW,GAACC,SAAtB,CAAnD,CAAH,CAAN,CAAhB;AAEA,SAAOE,IAAI,CAACG,KAAL,CAAWJ,aAAX,CAAP;AAGH;AAED,OAAO,SAAUK,SAAV,CAAoBC,IAApB,EAAyBC,MAAzB,EAAgCC,SAAhC,EACP;AACI,MAAIC,eAAe,GAAG,CAAtB;;AACA,UAAQD,SAAR;AACI,SAAK,SAAL;AACA,SAAK,SAAL;AACIC,MAAAA,eAAe,GAAE,CAAjB;AACI;;AACR,SAAK,YAAL;AACA,SAAK,QAAL;AACIA,MAAAA,eAAe,GAAE,CAAjB;AACA;;AAEJ;AACIA,MAAAA,eAAe,GAAE,CAAjB;AACA;AAZR,GAFJ,CAgBI;;;AACA,MAAIC,SAAS,GAAGH,MAAM,GAACE,eAAP,IAA0BH,IAAI,GAACA,IAAL,GAAU,EAApC,IAAwC,GAAxD;AACA,SAAOI,SAAP;AAEH;AAED,OAAO,SAAUC,QAAV,CAAmBC,IAAnB,EAAwBC,IAAxB,EACP;AACI,MAAIC,IAAI,GAAG,CAAX;;AACA,UAAQF,IAAR;AACI,SAAK,SAAL;AACA,SAAK,SAAL;AACIE,MAAAA,IAAI,GAAE,EAAN;AACI;;AACR,SAAK,OAAL;AACA,SAAK,YAAL;AACA,SAAK,QAAL;AACIA,MAAAA,IAAI,GAAC,CAAL;AACA;;AACJ,SAAK,WAAL;AACIA,MAAAA,IAAI,GAAKb,IAAI,CAACC,GAAL,CAASW,IAAT,EAAc,IAAE,CAAhB,CAAD,GAAqB,EAAtB,GAA0B,EAAjC;AACA;;AACJ,SAAK,UAAL;AACIC,MAAAA,IAAI,GAAGb,IAAI,CAACC,GAAL,CAASW,IAAT,EAAc,IAAE,CAAhB,CAAD,GAAqB,CAAtB,GAAyB,EAA9B;AACA;;AACJ,SAAK,UAAL;AACIC,MAAAA,IAAI,GAAIb,IAAI,CAACC,GAAL,CAASW,IAAT,EAAc,IAAE,CAAhB,CAAD,GAAqB,CAAtB,GAAyB,EAA/B;AACA;;AACJ,SAAK,WAAL;AACIC,MAAAA,IAAI,GAAE,EAAN;AACA;;AACA,SAAK,UAAL;AACAA,MAAAA,IAAI,GAAE,EAAN;AACA;;AACJ,SAAK,WAAL;AACIA,MAAAA,IAAI,GAAE,EAAN;AACA;;AACJ;AACIA,MAAAA,IAAI,GAAE,EAAN;AACA;AA9BR;;AAgCA,SAAO,KAAG,IAAH,GAAUA,IAAjB;AACF","sourcesContent":["export function doughCalc(temperature,startermass,doughmass) {\n\n\n    var timeinMinutes = 0;\n    if (temperature<4 || temperature>35 || startermass<1 || startermass>5000 || doughmass<1 || doughmass>5000 )\n    {\n        //hmm something funny going on \n        return 1;\n    }\n    //timeinMinutes = 45/(Math.pow(2,((35-this.state.temperature)/7))*(1+Math.log2(0.5)-Math.log2(this.state.startermass/this.state.doughmass)));\n    timeinMinutes = (45)/(1/(Math.pow(2,((35-temperature)/7))*(1+Math.log2(0.5)-Math.log2(startermass/doughmass))));\n    \n    return Math.round(timeinMinutes);\n\n\n}\n\nexport function  pizzaMass(size,number,pizzatype)\n{\n    var thicknessfactor = 1;\n    switch (pizzatype) {\n        case 'chicago': \n        case 'deeppan': \n            thicknessfactor= 2;            \n                break;\n        case 'napoletana':\n        case 'romano': \n            thicknessfactor= 1;            \n            break;\n    \n        default:\n            thicknessfactor= 1;\n            break;\n    }\n    //A 9 inch pizza with thin base (romano?)  should be made from 225g dough\n    var pizzamass = number*thicknessfactor * (size*size/81)*225 ; \n    return pizzamass;\n\n}\n\nexport function  bakeTime(type,mass)\n{\n    var time = 0;\n    switch (type) {\n        case 'chicago': \n        case 'deeppan': \n            time =10;            \n                break;\n        case 'pizza':\n        case 'napoletana':\n        case 'romano': \n            time=7;            \n            break;\n        case 'roundloaf': \n            time=  ((Math.pow(mass,1/3))/10)*40;            \n            break;\n        case 'flatloaf': \n            time=((Math.pow(mass,1/3))/5)*40;            \n            break;\n        case 'ovalloaf': \n            time =((Math.pow(mass,1/3))/7)*40;            \n            break;\n        case 'smallbuns': \n            time= 15;            \n            break;\n            case 'baguette': \n            time= 15;            \n            break;\n        case 'largebuns': \n            time= 20;            \n            break;\n        default:\n            time= 30;\n            break;\n    }\n    return 60*1000 * time;\n }"]},"metadata":{},"sourceType":"module"}