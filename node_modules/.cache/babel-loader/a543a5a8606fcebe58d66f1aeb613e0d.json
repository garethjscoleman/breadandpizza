{"ast":null,"code":"import _classCallCheck from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/garethjscoleman/bread pizza/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/garethjscoleman/bread pizza/src/Components/quanitiesAndTimes/quantitiesAndTimes.js\";\nimport React, { Component } from 'react';\nimport { FormGroup } from 'react-bootstrap';\nimport { ControlLabel } from 'react-bootstrap';\nimport { FormControl } from 'react-bootstrap';\nimport { HelpBlock } from 'react-bootstrap';\nimport { doughCalc } from './../../Services/doughCalc';\nimport { pizzaMass } from './../../Services/doughCalc';\nimport { bakeTime } from './../../Services/doughCalc';\nimport DoughHydration from './../doughHydration/doughHydration';\nimport ReactDOM from 'react-dom';\nimport InputRange from 'react-input-range';\n\nvar QuantitiesAndTimes =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(QuantitiesAndTimes, _React$Component);\n\n  function QuantitiesAndTimes(props, context) {\n    var _this;\n\n    _classCallCheck(this, QuantitiesAndTimes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuantitiesAndTimes).call(this, props, context));\n\n    _this.calcTimeToRise = function (doughProps) {\n      var proofingtimes = doughProps.proofingtimes;\n      var firstrisetime = doughCalc(doughProps.temperature, doughProps.startermass, doughProps.doughmass);\n      var secondrisetime = doughCalc(doughProps.fridgetemperature, doughProps.startermass, doughProps.doughmass);\n      doughProps.proofingtimes.inroom = firstrisetime;\n      doughProps.proofingtimes.infridge = secondrisetime;\n      doughProps.timeToRise = firstrisetime + secondrisetime;\n\n      try {\n        doughProps.desiredDateTime = Date.parse(doughProps.desiredDate + ' ' + doughProps.desiredTime);\n      } catch (_unused) {\n        doughProps.desiredDateTime = 0;\n      }\n\n      if (isNaN(doughProps.desiredDateTime)) {\n        doughProps.desiredDateTime = 0;\n      } else {\n        doughProps.baketime = bakeTime(doughProps.breadType, doughProps.doughmass);\n        doughProps.roomstart = new Date(doughProps.desiredDateTime - doughProps.baketime - 2 * doughProps.proofingtimes.inroom * (60 * 1000)).toLocaleString();\n        doughProps.roomshape = new Date(doughProps.desiredDateTime - doughProps.baketime - doughProps.proofingtimes.inroom * (60 * 1000)).toLocaleString();\n        doughProps.fridgestart = new Date(doughProps.desiredDateTime - doughProps.baketime - 2 * doughProps.proofingtimes.infridge * (60 * 1000)).toLocaleString();\n        doughProps.fridgeshape = new Date(doughProps.desiredDateTime - doughProps.baketime - doughProps.proofingtimes.infridge * (60 * 1000)).toLocaleString();\n        doughProps.roomplusfridgestart = new Date(doughProps.desiredDateTime - doughProps.baketime - (doughProps.proofingtimes.infridge + doughProps.proofingtimes.inroom) * (60 * 1000)).toLocaleString();\n        doughProps.roomplusfridgeshape = new Date(doughProps.desiredDateTime - doughProps.baketime - doughProps.proofingtimes.inroom * (60 * 1000)).toLocaleString();\n        doughProps.fridgeplusroomstart = doughProps.roomplusfridgestart;\n        doughProps.fridgeplusroomshape = new Date(doughProps.desiredDateTime - doughProps.baketime - doughProps.proofingtimes.infridge * (60 * 1000)).toLocaleString();\n      }\n\n      return doughProps;\n    };\n\n    _this.getValidationState = function () {\n      var theQuantity = this.state.quantity;\n      if (theQuantity < 1) return 'error';else if (theQuantity > 5000) return 'error';\n      var theSize = this.state.size;\n      if (theSize < 1) return 'error';else if (theSize > 5000) return 'error';\n      var theTemp = this.state.temperature;\n      if (theTemp < 1) return 'error';else if (theTemp > 35) return 'error';\n      var theFridgeTemp = this.state.fridgetemperature;\n      if (theFridgeTemp < 1) return 'error';else if (theFridgeTemp > 35) return 'error';\n      var theStarterMass = this.state.startermass;\n      if (theStarterMass < 1) return 'error';else if (theStarterMass > 50000) return 'error';\n      var theDoughMass = this.state.doughmass;\n      if (theDoughMass < 1) return 'error';else if (theDoughMass > 50000) return 'error';else return 'success';\n    };\n\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSizeChange = _this.handleSizeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleWantedTimeChange = _this.handleWantedTimeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleWantedDateChange = _this.handleWantedDateChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFridgeChange = _this.handleFridgeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTempChange = _this.handleTempChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setDesiredStartTime = _this.setDesiredStartTime.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleStarterChange = _this.handleStarterChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMassChange = _this.handleMassChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      breadType: props.breadType,\n      baketime: 0,\n      quantity: 1,\n      size: 9,\n      temperature: 17,\n      fridgetemperature: 5,\n      startermass: 200,\n      doughmass: 250,\n      desiredDate: '1999-12-31',\n      desiredTime: '23:59',\n      desiredDateTime: 0,\n      roomstart: 0,\n      fridgestart: 0,\n      roomplusfridgestart: 0,\n      roomplusfridgeshape: 0,\n      fridgeplusroomstart: 0,\n      fridgeplusroomshape: 0,\n      proofingtimes: {\n        inroom: 0,\n        infridge: 0\n      },\n      timeToRise: 0\n    };\n    return _this;\n  }\n\n  _createClass(QuantitiesAndTimes, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var theDate = new Date();\n      theDate.setHours(theDate.getHours() + 6);\n      var doughProps = this.state;\n      doughProps = this.setDesiredStartTime(theDate, doughProps);\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"setDesiredStartTime\",\n    value: function setDesiredStartTime(theTimetoStart, doughProps) {\n      //we need a point a bit in the future - try 6 hours \n      //today = today.addHours(6);\n      var dd = theTimetoStart.getDate();\n      var mm = theTimetoStart.getMonth() + 1; //January is 0!      \n\n      var yyyy = theTimetoStart.getFullYear();\n      var HH = theTimetoStart.getHours();\n      var nn = theTimetoStart.getMinutes();\n\n      if (dd < 10) {\n        dd = '0' + dd;\n      }\n\n      if (mm < 10) {\n        mm = '0' + mm;\n      }\n\n      if (HH < 10) {\n        HH = '0' + HH;\n      }\n\n      if (nn < 10) {\n        nn = '0' + nn;\n      }\n\n      var sDay = yyyy + '-' + mm + '-' + dd;\n      var sTime = HH + ':' + nn;\n      doughProps.desiredDate = sDay;\n      doughProps.desiredTime = sTime;\n      return doughProps;\n    }\n  }, {\n    key: \"handleChangesToDoughRiseTime\",\n    value: function handleChangesToDoughRiseTime(doughProps) {\n      var newdoughmass;\n\n      if (doughProps.breadType === \"pizza\") {\n        newdoughmass = pizzaMass(doughProps.size, doughProps.quantity, 'napoletana');\n      } else {\n        newdoughmass = doughProps.doughmass;\n      }\n\n      if (newdoughmass > 1) {\n        doughProps.doughmass = newdoughmass;\n        var startermass = doughProps.startermass;\n\n        if (startermass > 0.5 * newdoughmass) {\n          var newstartermass = 0.5 * newdoughmass;\n\n          if (newstartermass > 1) {\n            doughProps.startermass = newstartermass;\n          }\n        }\n\n        doughProps = this.calcTimeToRise(doughProps);\n      }\n\n      return doughProps;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(value) {\n      var doughProps = this.state;\n      doughProps.quantity = value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleSizeChange\",\n    value: function handleSizeChange(e) {\n      var doughProps = this.state;\n      doughProps.size = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleMassChange\",\n    value: function handleMassChange(e) {\n      var doughProps = this.state;\n      doughProps.size = 9;\n      doughProps.quantity = e.target.value / 225;\n      doughProps.doughmass = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleStarterChange\",\n    value: function handleStarterChange(e) {\n      var doughProps = this.state;\n      doughProps.startermass = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleWantedTimeChange\",\n    value: function handleWantedTimeChange(e) {\n      var doughProps = this.state;\n      doughProps.desiredTime = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleWantedDateChange\",\n    value: function handleWantedDateChange(e) {\n      var doughProps = this.state;\n      doughProps.desiredDate = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleFridgeChange\",\n    value: function handleFridgeChange(e) {\n      var doughProps = this.state;\n      doughProps.fridgetemperature = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"handleTempChange\",\n    value: function handleTempChange(e) {\n      var doughProps = this.state;\n      doughProps.temperature = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var breadType = this.props.breadType;\n      return React.createElement(\"form\", {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \" \", React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \"--\", breadType, \"--\"), React.createElement(FormGroup, {\n        controlId: \"formPizzaQantities\",\n        validationState: this.getValidationState(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, breadType === \"pizza\" ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(InputRange, {\n        step: 1,\n        maxValue: 15,\n        minValue: 1,\n        value: this.state.quantity,\n        onChange: function onChange(quantity) {\n          _this2.setState({\n            quantity: quantity\n          });\n\n          _this2.handleChange(quantity);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, \"How Many Pizza's do you want?  \", this.state.breadType === \"pizza\"), React.createElement(FormControl, {\n        type: \"number\",\n        value: this.state.quantity,\n        placeholder: \"Enter how many you want\",\n        onChange: this.handleChange,\n        min: \"1\",\n        max: \"5000\",\n        step: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \"This has to be a number between 1 and 5000.\"), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, \"How big should they be\"), React.createElement(FormControl, {\n        type: \"number\",\n        value: this.state.size,\n        placeholder: \"Enter how many you want\",\n        onChange: this.handleSizeChange,\n        min: \"7\",\n        max: \"18\",\n        step: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, \"This has to be a number between 7 and 18 inches.\")) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, \"How large do you want your loaf?\"), React.createElement(FormControl, {\n        type: \"number\",\n        value: this.state.doughmass,\n        placeholder: \"Enter how large do you want your loaf\",\n        onChange: this.handleMassChange,\n        min: \"100\",\n        max: \"5000\",\n        step: \"25\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, \"This has to be a number between 1 and 5000.\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, \" \", this.state.size, this.state.quantity, \"This is total mass of dough we need \", this.state.size * this.state.size / 81 * this.state.quantity * 225, \"g\"), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, \"How Much Starter do you have?\"), React.createElement(FormControl, {\n        type: \"number\",\n        value: this.state.startermass,\n        placeholder: \"Enter how much starter mass you think we can use\",\n        onChange: this.handleStarterChange,\n        min: \"10\",\n        max: \"5000\",\n        step: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"This has to be a number between 10 and 5000.\"), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, \"Which day do you want it\"), React.createElement(FormControl, {\n        type: \"date\",\n        value: this.state.desiredDate,\n        placeholder: \"When do you want it ?\",\n        onChange: this.handleWantedDateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, \"This has to be a date .\"), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, \"When do you want it?\"), React.createElement(FormControl, {\n        type: \"time\",\n        value: this.state.desiredTime,\n        placeholder: \"When do you want it ?\",\n        onChange: this.handleWantedTimeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, \"This has to be a time .\"), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, \"How warm is the room?\"), React.createElement(FormControl, {\n        type: \"number\",\n        value: this.state.temperature,\n        placeholder: \"Enter the room temp in Centigrade\",\n        onChange: this.handleTempChange,\n        min: \"4\",\n        max: \"35\",\n        step: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, \"This has to be a number between 4 and 35.\"), React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, \"How cold is the fridge?\"), React.createElement(FormControl, {\n        type: \"number\",\n        value: this.state.fridgetemperature,\n        placeholder: \"Enter how many you want\",\n        onChange: this.handleFridgeChange,\n        min: \"4\",\n        max: \"35\",\n        step: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, \"This has to be a number between 4 and 35.\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, \"Baking Time\"), \"Approx \", Math.round(this.state.baketime / 60000), \" for \", this.state.breadType, \" of this size\", React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, \"In Room\"), \"Time of room rise is:  \", this.state.proofingtimes.inroom, \" mins.(that is about \", Math.round(this.state.proofingtimes.inroom / 6) / 10, \" hours )\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }), \"Start at \", this.state.roomstart, \", with a shape around \", this.state.roomshape, \" to achive the desired time in the room\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, \"In Fridge\"), \"Time of fridge rise is:  \", this.state.proofingtimes.infridge, \" mins. (that is about \", Math.round(this.state.proofingtimes.infridge / 6) / 10, \" hours )\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }), \"Start at \", this.state.fridgestart, \", with a shape around \", this.state.fridgeshape, \" to achive the desired time in the fridge\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, \"Fridge, then Room \"), \"Start at \", this.state.roomplusfridgestart, \", with a shape around \", this.state.roomplusfridgeshape, \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, \"Room, then Fridge \"), \"Start at \", this.state.fridgeplusroomstart, \", with a shape around \", this.state.fridgeplusroomshape, \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }), \"Mass of starter is \", this.state.startermass, \" g\", React.createElement(DoughHydration, {\n        doughmass: this.state.doughmass,\n        startermass: this.state.startermass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return QuantitiesAndTimes;\n}(React.Component);\n\nexport default QuantitiesAndTimes;","map":{"version":3,"sources":["/home/garethjscoleman/bread pizza/src/Components/quanitiesAndTimes/quantitiesAndTimes.js"],"names":["React","Component","FormGroup","ControlLabel","FormControl","HelpBlock","doughCalc","pizzaMass","bakeTime","DoughHydration","ReactDOM","InputRange","QuantitiesAndTimes","props","context","calcTimeToRise","doughProps","proofingtimes","firstrisetime","temperature","startermass","doughmass","secondrisetime","fridgetemperature","inroom","infridge","timeToRise","desiredDateTime","Date","parse","desiredDate","desiredTime","isNaN","baketime","breadType","roomstart","toLocaleString","roomshape","fridgestart","fridgeshape","roomplusfridgestart","roomplusfridgeshape","fridgeplusroomstart","fridgeplusroomshape","getValidationState","theQuantity","state","quantity","theSize","size","theTemp","theFridgeTemp","theStarterMass","theDoughMass","handleChange","bind","handleSizeChange","handleWantedTimeChange","handleWantedDateChange","handleFridgeChange","handleTempChange","setDesiredStartTime","handleStarterChange","handleMassChange","theDate","setHours","getHours","handleChangesToDoughRiseTime","setState","theTimetoStart","dd","getDate","mm","getMonth","yyyy","getFullYear","HH","nn","getMinutes","sDay","sTime","newdoughmass","newstartermass","value","e","target","Math","round"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { FormGroup } from 'react-bootstrap';\nimport { ControlLabel } from 'react-bootstrap';\nimport { FormControl } from 'react-bootstrap';\nimport { HelpBlock } from 'react-bootstrap';\n\nimport { doughCalc } from './../../Services/doughCalc';\nimport { pizzaMass } from './../../Services/doughCalc';\nimport { bakeTime } from './../../Services/doughCalc';\nimport  DoughHydration  from './../doughHydration/doughHydration';\nimport ReactDOM from 'react-dom';\nimport InputRange from 'react-input-range';\n\nclass QuantitiesAndTimes extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n      \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSizeChange = this.handleSizeChange.bind(this);\n      this.handleWantedTimeChange = this.handleWantedTimeChange.bind(this);\n      this.handleWantedDateChange = this.handleWantedDateChange.bind(this);\n      this.handleFridgeChange = this.handleFridgeChange.bind(this);\n      this.handleTempChange = this.handleTempChange.bind(this);\n      this.setDesiredStartTime = this.setDesiredStartTime.bind(this);\n      this.handleStarterChange = this.handleStarterChange.bind(this);\n      this.handleMassChange = this.handleMassChange.bind(this);\n      \n      \n      this.state = {\n        breadType: props.breadType,\n        baketime:0,\n        quantity : 1,\n        size : 9,\n        temperature : 17,\n        fridgetemperature : 5,\n        startermass : 200,\n        doughmass : 250,\n        desiredDate: '1999-12-31',\n        desiredTime: '23:59',\n        desiredDateTime : 0,\n        roomstart: 0 ,\n        fridgestart : 0,\n        roomplusfridgestart:0,\n        roomplusfridgeshape:0,\n        fridgeplusroomstart:0,\n        fridgeplusroomshape:0,\n        proofingtimes : {\n          inroom : 0,\n          infridge : 0\n        },\n        timeToRise:0,\n       \n      };\n\n      \n\n\n    }\n    componentDidMount() {\n      \n      var theDate = new Date();\n      theDate.setHours( theDate.getHours()+6);\n      \n      var doughProps = this.state;\n      doughProps = this.setDesiredStartTime(theDate, doughProps);\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n  \n \n    setDesiredStartTime(theTimetoStart, doughProps){\n      \n      //we need a point a bit in the future - try 6 hours \n      //today = today.addHours(6);\n\n      var dd = theTimetoStart.getDate();\n      var mm = theTimetoStart.getMonth() + 1; //January is 0!      \n      var yyyy = theTimetoStart.getFullYear();\n      var HH = theTimetoStart.getHours();\n      var nn = theTimetoStart.getMinutes();\n\n      if (dd < 10) {\n        dd = '0' + dd;\n      } \n      if (mm < 10) {\n        mm = '0' + mm;\n      } \n      if (HH < 10) {\n        HH = '0' + HH;\n      } \n      if (nn < 10) {\n        nn = '0' + nn;\n      } \n      var sDay =  yyyy + '-' + mm + '-' + dd ;\n      var sTime = HH + ':'+ nn;\n      doughProps.desiredDate =  sDay;\n      doughProps.desiredTime = sTime ;\n      return doughProps;\n\n    }\n\n\n   \n\n    calcTimeToRise = function(doughProps){\n      var proofingtimes = doughProps.proofingtimes;\n      var firstrisetime = doughCalc(doughProps.temperature,doughProps.startermass,doughProps.doughmass);\n      var secondrisetime = doughCalc(doughProps.fridgetemperature,doughProps.startermass,doughProps.doughmass); \n      doughProps.proofingtimes.inroom = firstrisetime;\n      doughProps.proofingtimes.infridge = secondrisetime ;\n      doughProps.timeToRise = firstrisetime+secondrisetime ;\n      try {\n        doughProps.desiredDateTime = Date.parse(doughProps.desiredDate + ' ' + doughProps.desiredTime);\n      }\n      catch\n      {\n        doughProps.desiredDateTime = 0;\n      } \n      if (isNaN(doughProps.desiredDateTime))\n      {\n        doughProps.desiredDateTime = 0;\n      } \n      else\n      {\n         \n        doughProps.baketime = bakeTime(doughProps.breadType,doughProps.doughmass);\n        doughProps.roomstart =  (new Date(doughProps.desiredDateTime - doughProps.baketime - (2*doughProps.proofingtimes.inroom*(60*1000)))).toLocaleString();\n        doughProps.roomshape = (new Date(doughProps.desiredDateTime - doughProps.baketime -  (doughProps.proofingtimes.inroom*(60*1000)))).toLocaleString();\n        doughProps.fridgestart =  (new Date(doughProps.desiredDateTime - doughProps.baketime - (2*doughProps.proofingtimes.infridge*(60*1000)))).toLocaleString();\n        doughProps.fridgeshape =  (new Date(doughProps.desiredDateTime - doughProps.baketime -  (doughProps.proofingtimes.infridge*(60*1000)))).toLocaleString();\n        doughProps.roomplusfridgestart =  (new Date(doughProps.desiredDateTime - doughProps.baketime - ((doughProps.proofingtimes.infridge+doughProps.proofingtimes.inroom)*(60*1000)))).toLocaleString();\n        doughProps.roomplusfridgeshape = (new Date(doughProps.desiredDateTime - doughProps.baketime -  (doughProps.proofingtimes.inroom*(60*1000)))).toLocaleString();\n        doughProps.fridgeplusroomstart = doughProps.roomplusfridgestart; \n        doughProps.fridgeplusroomshape =  (new Date(doughProps.desiredDateTime - doughProps.baketime - (doughProps.proofingtimes.infridge*(60*1000)))).toLocaleString();\n\n\n      }\n      return doughProps;\n    }\n\n    \n\n     getValidationState = function() {\n      const theQuantity = this.state.quantity;\n      if (theQuantity < 1) return 'error';\n      else if (theQuantity > 5000) return 'error';\n      const theSize = this.state.size;\n      if (theSize < 1) return 'error';\n      else if (theSize > 5000) return 'error';\n      const theTemp = this.state.temperature;\n      if (theTemp < 1) return 'error';\n      else if (theTemp > 35) return 'error';\n      const theFridgeTemp = this.state.fridgetemperature;\n      if (theFridgeTemp < 1) return 'error';\n      else if (theFridgeTemp > 35) return 'error';      \n      const theStarterMass = this.state.startermass;\n      if (theStarterMass < 1) return 'error';\n      else if (theStarterMass > 50000) return 'error';      \n      const theDoughMass = this.state.doughmass;\n      if (theDoughMass < 1) return 'error';\n      else if (theDoughMass > 50000) return 'error';\n      else return 'success';      \n    }\n\n    handleChangesToDoughRiseTime(doughProps){\n      var newdoughmass; \n      if ( doughProps.breadType === \"pizza\"){\n        newdoughmass = pizzaMass( doughProps.size, doughProps.quantity, 'napoletana' ) ; \n      }\n      else\n      {\n        newdoughmass = doughProps.doughmass;\n      }\n      if (newdoughmass>1)\n      {\n        doughProps.doughmass = newdoughmass;  \n        var startermass = doughProps.startermass;\n        if (startermass> 0.5* newdoughmass ){\n          var newstartermass = 0.5* newdoughmass;\n          if (newstartermass>1)\n          {\n            doughProps.startermass = newstartermass;\n          }\n\n        }                \n        doughProps = this.calcTimeToRise(doughProps);\n      }\n      return doughProps;\n\n    }\n\n  \n    handleChange(value) {\n      var doughProps = this.state;\n      doughProps.quantity = value; \n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n      \n\n    }\n    handleSizeChange(e) {\n      var doughProps = this.state;\n      doughProps.size = e.target.value; \n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n\n    }\n\n    handleMassChange(e)\n    {\n      var doughProps = this.state;\n      doughProps.size = 9; \n      doughProps.quantity =  e.target.value/225;\n      doughProps.doughmass =  e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n\n\n    }\n    handleStarterChange(e) {\n      var doughProps = this.state;\n      doughProps.startermass = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n    handleWantedTimeChange(e) {\n      var doughProps = this.state;\n      doughProps.desiredTime = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n    handleWantedDateChange(e) {\n      var doughProps = this.state;\n      doughProps.desiredDate = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n    handleFridgeChange(e) {\n      var doughProps = this.state;\n      doughProps.fridgetemperature = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n    handleTempChange(e) {\n      var doughProps = this.state;\n      doughProps.temperature = e.target.value;\n      doughProps = this.handleChangesToDoughRiseTime(doughProps);\n      this.setState(doughProps);\n    }\n\n    render() {\n      const breadType = this.props.breadType;\n\n      return(\n\n     <form className=\"form\"> <div>--{(breadType)}--</div>\n          <FormGroup\n            controlId=\"formPizzaQantities\"\n            validationState={this.getValidationState()}>\n            { breadType===\"pizza\" ? <div> \n            <InputRange\n              step={1}\n              maxValue={15}\n              minValue={1}\n              value={this.state.quantity}\n              onChange={quantity => {this.setState({ quantity }); this.handleChange(quantity); }} />\n            <ControlLabel>How Many Pizza&apos;s do you want?  {(this.state.breadType===\"pizza\")}</ControlLabel>\n            <FormControl\n              type=\"number\"\n              value={this.state.quantity}\n              placeholder=\"Enter how many you want\"\n              onChange={this.handleChange}\n              min=\"1\" max=\"5000\"\n              step=\"1\"\n            />\n            <FormControl.Feedback />\n            <HelpBlock>This has to be a number between 1 and 5000.</HelpBlock>\n            <ControlLabel>How big should they be</ControlLabel>\n            <FormControl\n              type=\"number\"\n              value={this.state.size}\n              placeholder=\"Enter how many you want\"\n              onChange={this.handleSizeChange}\n              min=\"7\" max=\"18\"\n              step=\"2\"\n            />\n            <FormControl.Feedback />\n            <HelpBlock>This has to be a number between 7 and 18 inches.</HelpBlock> \n            </div>: \n            <div>\n              <ControlLabel>How large do you want your loaf?</ControlLabel>\n            <FormControl\n              type=\"number\"\n              value={this.state.doughmass}\n              placeholder=\"Enter how large do you want your loaf\"\n              onChange={this.handleMassChange}\n              min=\"100\" max=\"5000\"\n              step=\"25\"\n            />\n            <FormControl.Feedback />\n            <HelpBlock>This has to be a number between 1 and 5000.</HelpBlock>\n          </div>\n          }\n\n            <div> {(this.state.size)}{(this.state.quantity)}This is total mass of dough we need {(this.state.size*this.state.size/81)*this.state.quantity*225}g</div>\n            <ControlLabel>How Much Starter do you have?</ControlLabel>\n            <FormControl\n              type=\"number\"\n              value={this.state.startermass}\n              placeholder=\"Enter how much starter mass you think we can use\"\n              onChange={this.handleStarterChange}\n              min=\"10\" max=\"5000\"\n              step=\"1\"\n            />\n            <FormControl.Feedback />\n            <HelpBlock>This has to be a number between 10 and 5000.</HelpBlock>\n\n\n            <ControlLabel>Which day do you want it</ControlLabel>\n            <FormControl\n              type=\"date\"\n              value={this.state.desiredDate}\n              placeholder=\"When do you want it ?\"\n              onChange={this.handleWantedDateChange}\n            />\n            <FormControl.Feedback />\n            <HelpBlock>This has to be a date .</HelpBlock>\n            <ControlLabel>When do you want it?</ControlLabel>\n            <FormControl\n              type=\"time\"\n              value={this.state.desiredTime}\n              placeholder=\"When do you want it ?\"\n              onChange={this.handleWantedTimeChange}\n            />\n            \n\n            <FormControl.Feedback />\n            <HelpBlock>This has to be a time .</HelpBlock>\n            <ControlLabel>How warm is the room?</ControlLabel>\n            <FormControl\n              type=\"number\"\n              value={this.state.temperature}\n              placeholder=\"Enter the room temp in Centigrade\"\n              onChange={this.handleTempChange}\n              min=\"4\" max=\"35\"\n              step=\"1\"\n            />\n            <FormControl.Feedback />\n            <HelpBlock>This has to be a number between 4 and 35.</HelpBlock>\n            <ControlLabel>How cold is the fridge?</ControlLabel>\n            <FormControl\n              type=\"number\"\n              value={this.state.fridgetemperature}\n              placeholder=\"Enter how many you want\"\n              onChange={this.handleFridgeChange}\n              min=\"4\" max=\"35\"\n              step=\"1\"\n            />\n            <FormControl.Feedback />\n            <HelpBlock>This has to be a number between 4 and 35.</HelpBlock>\n\n          <h2>Baking Time</h2>\n          Approx {(Math.round(this.state.baketime/60000))} for {(this.state.breadType)} of this size\n          <h2>In Room</h2>\n            Time of room rise is:  {(this.state.proofingtimes.inroom)} mins.(that is about {(Math.round(this.state.proofingtimes.inroom/6)/10)} hours )<br/>\n            Start at {(this.state.roomstart)}, with a shape around {(this.state.roomshape)} to achive the desired time in the room<br/>\n          <h2>In Fridge</h2>\n            Time of fridge rise is:  {(this.state.proofingtimes.infridge)} mins. (that is about {(Math.round(this.state.proofingtimes.infridge/6)/10)} hours )<br/>\n            Start at {(this.state.fridgestart)}, with a shape around {(this.state.fridgeshape)} to achive the desired time in the fridge<br/>\n          <h2>Fridge, then Room </h2>\n            Start at {(this.state.roomplusfridgestart)}, with a shape around {(this.state.roomplusfridgeshape)} <br/>\n          <h2>Room, then Fridge </h2>\n          Start at {(this.state.fridgeplusroomstart)}, with a shape around {(this.state.fridgeplusroomshape)} <br/>\n\n\n\n            Mass of starter is {(this.state.startermass)} g\n            <DoughHydration doughmass={(this.state.doughmass)} startermass={(this.state.startermass)} />\n          </FormGroup>\n        </form>);\n      }  \n    }\n  \n  \n  export default QuantitiesAndTimes;"]},"metadata":{},"sourceType":"module"}